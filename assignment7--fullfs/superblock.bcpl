import "io"
import "fsutils"
import "conversion"

export {
    create_superblock,
    sb_blocknum,
    sb_name_words,
    sb_magic, sb_magic_value,
    df,
    set_mtime, get_size, get_level
}

// Constants for superblock
manifest {
    // Location of superblock on disc. NB: blocks are 0-indexed.
    sb_blocknum = 0,
    // (1) Magic number to identify filesystem
    sb_magic = 0, sb_magic_value = 0x34343434,
    // (2) Name of the disc (three words => 11 chars)
    sb_name = sb_magic + 1, sb_name_words = 3,
    // (3) Disc unformatted capacity
    sb_size = sb_name + sb_name_words,
    // (4) Disc used size
    sb_used_size = sb_size + 1,
    // (5) Location of root directory
    sb_root = sb_used_size + 1,
    // (6) Location of start of the free stack
    sb_freelist = sb_root + 1
}

manifest {
    // (1) Name field
    node_name = 0,
    // 8 words => 31 character max file name
    node_name_words = 8,
    // (2) Length in bytes
    node_size = node_name + node_name_words,
    // (3) Create time (ctime)
    node_ctime = node_size + 1,
    node_ctime_words = 2, // 64 bits
    // (4) Modified time (mtime)
    node_mtime = node_ctime + node_ctime_words,
    node_mtime_words = 2,
    // (5) Type
    node_type = node_mtime + node_mtime_words,
    node_isfile = 0, node_isdir = 1,
    // (6) Current level
    node_level = node_type + 1
}


let read_superblock(unit_number, buf) be
    read_block(unit_number, sb_blocknum, buf);
let write_superblock(unit_number, buf) be
    write_block(unit_number, sb_blocknum, buf);

let set_magic(buf) be
    buf ! sb_magic := sb_magic_value

let set_name(buf, str) be
    strncpy(buf+sb_name, str, sb_name_words)
let get_name(dest, buf) be
    strncpy(dest, buf+sb_name, sb_name_words)

let set_total_capacity(buf, size) be
    buf ! sb_size := size
let get_total_capacity(buf) be
    resultis buf ! sb_size
let set_used_capacity(buf, size) be
    buf ! sb_used_size := size
let get_used_capacity(buf) be
    resultis buf ! sb_used_size

let set_root_location(buf, addr) be
    buf ! sb_root := addr
let get_root_location(buf) be
    resultis buf ! sb_root

// Returns the index of the word at the head of the free list.
// This word (and the block it refers to) is currently not being used.
let get_head_pointer(sb) be {
    let free_capacity = get_total_capacity(sb) - get_used_capacity(sb);
    resultis blocks_to_words(sb_freelist) + free_capacity;
}

// Get the block a word is in.
let get_words_block(word_number) be
    resultis (word_number / words_per_block)
// Get a word's position within a block
let get_words_position(word_number) be
    resultis (word_number rem words_per_block)

let fl_push(unit_number, block_to_push) be {
    let sb = vec words_per_block;
    let fb = vec words_per_block;
    let h_index, h_block, h_word, current_word, root_word, used_cap;
    read_superblock(unit_number, sb);

    // Get the word which will contain the new stack head
    h_index := get_head_pointer(sb) + 1; // Index of word at (head + 1)
    h_block := get_words_block(h_index); // Block that belongs in
    h_word := get_words_position(h_index); // Word of the block that belongs in

    // Get number of used blocks
    used_cap := get_used_capacity(sb) - 1; // Decrease by 1, due to push
    set_used_capacity(sb, used_cap);
    write_superblock(unit_number, sb);

    read_block(unit_number, h_block, fb); // Read in block with new head-word
    fb ! h_word := block_to_push; // Insert block # of block to push
    write_block(unit_number, h_block, fb); // Write out modified block

    // Number of blocks pushed
    // fixme: support pushing more than one at a time
    resultis 1;
}

let fl_push_initial(unit_number) be {
    let sb = vec words_per_block;
    let fb = vec words_per_block;
    let h_index, h_block, h_word, current_word, root_word;
    read_superblock(unit_number, sb);

    h_index := sb_freelist; // Index of word at head of free list
    h_block := get_words_block(h_index);   // Block head belongs in
    h_word := get_words_position(h_index);

    current_word := get_total_capacity(sb);
    root_word := get_root_location(sb);

    read_block(unit_number, h_block, fb);

    while current_word > root_word do {
        fb ! h_word := current_word;
        if (h_word = (words_per_block -1)) then {
	    write_block(unit_number, h_block, fb);
	    h_block +:= 1;
            read_block(unit_number, h_block, fb);
        }
        h_index +:= 1;
        h_word := get_words_position(h_index);
        current_word -:= 1;
    }
    h_index -:= 1;
    write_block(unit_number, h_block, fb);
    out("h_block: %d\n", h_block);

    return;
}

let fl_pop(unit_number) be {
    let sb = vec words_per_block;
    let fb = vec words_per_block;
    let h_index, h_block, h_word, used_cap;
    read_superblock(unit_number, sb);

    // Get stack head
    h_index := get_head_pointer(sb); // Index of word at head of free list
    h_block := get_words_block(h_index); // Block head belongs in
    h_word := get_words_position(h_index); // Word of that block that head is

    // Get number of used blocks
    used_cap := get_used_capacity(sb) + 1; // Increase by 1, due to pop
    set_used_capacity(sb, used_cap);
    write_superblock(unit_number, sb);

    // Read in block which head is contained in
    read_block(unit_number, h_block, fb);
    // Return the block number of the block just popped from free list
    resultis (fb ! h_word);
}

let create_superblock(unit_number, name) be {
    let buf = vec words_per_block, disc_size;
    let super_block_blocks;

    // fixme: check if lt 0 and perror()
    disc_size := get_physical_disc_size(unit_number);
    super_block_blocks := words_to_blocks(disc_size + sb_freelist);

    set_magic(buf);
    set_name(buf, name);
    set_total_capacity(buf, disc_size);
    // Not equal to zero because superblock takes up space
    set_used_capacity(buf, super_block_blocks + 1);

    // Use first block after end of super block store the root directory
    // XXX: this is not accurate since freelist presumed to be usable space
    set_root_location(buf, super_block_blocks + 1);

    // Finally, write out
    // fixme: check if lt 0 and perror()
    write_block(unit_number, sb_blocknum, buf);

    // Push all chunks onto the free stack
    fl_push_initial(unit_number);
    // TODO: create root directory
    create_node(unit_number, "/", true, 0);
}

let df() be {
    let buf = vec words_per_block;
    let str = vec sb_name_words;
    let disc_no = 1;
    let retval = 0;

    {
        retval := get_physical_disc_size(disc_no);
        if retval <= 0 then break;

        read_block(disc_no, sb_blocknum, buf);
        // TODO: do not show if disc unformatted
        get_name(str, buf);
        out("disc %d: %s\n", disc_no, str);
        out("total size: %d blocks    ", get_total_capacity(buf));
        out("used size: %d blocks    ", get_used_capacity(buf));
        out("root location: block %d\n\n", get_root_location(buf));

        disc_no +:= 1;
    } repeat;
}

let set_node_name(node, name) be
    strncpy(node + node_name, name, node_name_words)
let get_node_name(node, name) be
    strncpy(name, node + node_name, node_name_words)

let set_ctime(node) be
    get_current_time(node + node_ctime)
let set_mtime(node) be
    get_current_time(node + node_mtime)

let get_size(node) be
    resultis node ! node_size
let set_size(node, size) be
    node ! node_size := size

let set_level(node, level) be
    node ! node_level := level
let get_level(node) be
    resultis node ! node_level

// A -> B, C == A ? B : C
let set_type(node, is_dir) be
    node ! node_type := is_dir -> node_isdir, node_isfile

// Creates a node in the FS that corresponds to either a directory
// or a file.
// name: string, is_dir: boolean, size: size in bytes
let create_node(disc_no, name, is_dir, size) be {
    let block_number = fl_pop();
    let buf = vec words_per_block;

    set_name(buf, name);
    set_size(buf, size);
    set_ctime(buf);
    set_mtime(buf);
    set_type(buf, is_dir);
    set_level(buf, 1);

    write_block(disc_no, block_number, buf);
}

let add_data(node, buf) be {
}

let deepen_level() be {
}

// Let node be the block with header stuff
let add_level(disc_no, node) be {
}
