import "io"
import "conversion"
import "fsutils"

manifest {
    // default disc number to load
    // I guess arbitrary numbers of discs could be supported
    MAIN_DISC_UNIT = 1,
    // location of superblock on disc
    // NB: blocks are 0-indexed
    SB_BLOCKNUM = 0,
    // anatomy of superblock:
    // (1) magic number to tell if our filesystem exists or not
    SB_MAGICNUM_OFFSET = 0,
    SB_MAGICNUM = 0x3434,
    // (2) size of disc at format time
    SB_FS_DISCSIZE_OFFSET = 1
    // (3)
}


let get_physical_disc_size(unit_number) be
    resultis devctl(DC_DISC_CHECK, unit_number)
// Utilities for reading/writing a single block
let read_block(disc_unit, block, buf) be
    resultis devctl(DC_DISC_READ, disc_unit, block, 1, buf);
let write_block(disc_unit, block, buf) be
    resultis devctl(DC_DISC_WRITE, disc_unit, block, 1, buf);

// Initializes the fs without checking for previously existant fs
let init_fs_unsafe(disc_unit) be {
    let writeret, sizeret;
    let buf = vec(WORDS_PER_BLOCK);
    buf ! SB_MAGICNUM_OFFSET := SB_MAGICNUM;

    sizeret := get_physical_disc_size(disc_unit);
    if sizeret < 0 then {
        outs("init_fs_unsafe: could not get disc size\n");
        resultis sizeret
    }
    buf ! SB_FS_DISCSIZE_OFFSET := sizeret;

    // TODO

    writeret := write_block(disc_unit, SB_BLOCKNUM, buf);
    if writeret < 0 then {
        outs("init_fs_unsafe: could not write superblock");
        resultis writeret
    }
    resultis 0
}
// Checks for fs already in existence.
// To bypass, just delete `maindrive.disc`
let init_fs(disc_unit) be
{   let buf = vec(WORDS_PER_BLOCK);
    // Check if filesystem already exists
    read_block(disc_unit, SB_BLOCKNUM, buf);
    if buf ! SB_MAGICNUM_OFFSET = SB_MAGICNUM then
    {   out("found preexisting file system on disc unit %d...\n", disc_unit);
        return; }

    // Otherwise, create superblock and root directory
    resultis init_fs_unsafe(disc_unit) }


let start() be {
    init_fs(MAIN_DISC_UNIT);
    return
}
