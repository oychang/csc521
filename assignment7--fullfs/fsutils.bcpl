import "io"

export { log, perror, ins }
manifest {  LOG_DEBUG = true }

let log(format) be {
  if format = nil \/ LOG_DEBUG = false then return;
  out(format);
}

let perror(code) be {
    switchon code into {
    case -2:
        outs("ERR_READ_PARAMS\n");
        endcase;
    case -3:
        out("ERR_DEV_NUMBER\n");
        endcase;
    case -4:
        out("ERR_POSITION\n");
        endcase;
    case -5:
        out("ERR_MEMORY\n");
        endcase;
    case -6:
        out("ERR_DEV_FAILED\n");
        endcase;
    default:
        out("unknown error code\n");
    }

    return
}

// straight up copy-pasted
// http://rabbit.eng.miami.edu/class/een521/samples/r2.b
let ins(string, veclen) be
{ let max = (veclen-1)*4;
  let length = 0;

  while length < max do
  { let c = inch();
    if c = '\n' then break;
    if c = 4 then break; // ctrl+d
    byte length of string := c;
    length +:= 1 }

  byte length of string := 0;
  resultis string }
