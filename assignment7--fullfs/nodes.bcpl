import "io"
import "fsutils"
import "superblock"

export {
    get_current_time, print_time,
    set_mtime, get_size, get_level
}

manifest {
    // (1) Name field
    node_name = 0,
    // 8 words => 31 character max file name
    node_name_words = 8,
    // (2) Length in bytes
    node_size = node_name + node_name_words,
    // (3) Create time (ctime)
    node_ctime = node_size + 1,
    node_ctime_words = 2, // 64 bits
    // (4) Modified time (mtime)
    node_mtime = node_ctime + node_ctime_words,
    node_mtime_words = 2,
    // (5) Type
    node_type = node_mtime + node_mtime_words,
    node_isfile = 0, node_isdir = 1,
    // (6) Current level
    node_level = node_type + 1
}

let set_node_name(node, name) be
    strncpy(node + node_name, name, node_name_words)
let get_node_name(node, name) be
    strncpy(name, node + node_name, node_name_words)

let get_current_time(buf) be
    datetime2(buf)
let set_ctime(node) be
    get_current_time(node + node_ctime)
let set_mtime(node) be
    get_current_time(node + node_mtime)
let print_time(compressed_time) be {
    let v0 = compressed_time ! 0;
    let v1 = compressed_time ! 1;

    let year = selector 13 : 19;
    let month = selector 4 : 15;
    let day = selector 5 : 7;

    let hour = selector 5 : 27;
    let minute = selector 6 : 21;
    let second = selector 6 : 15;
    let millisecond = selector 10 : 5;

    out("%d/%d/%d", month from v0, day from v0, year from v0);
    outs(", ");
    out("%d:%02d:%02d.%d", hour from v1, minute from v1,
        second from v1, millisecond from v1);
    out("\n");
}

let get_size(node) be
    resultis node ! node_size
let set_size(node, size) be
    node ! node_size := size

let set_level(node, level) be
    node ! node_level := level
let get_level(node) be
    resultis node ! node_level

// A -> B, C == A ? B : C
let set_type(node, is_dir) be
    node ! node_type := is_dir -> node_isdir, node_isfile

// Creates a node in the FS that corresponds to either a directory
// or a file.
// name: string, is_dir: boolean, size: size in bytes
let create_node(disc_no, name, is_dir, size) be {
    let block_number = fl_pop();
    let buf = vec words_per_block;

    set_name(buf, name);
    set_size(buf, size);
    set_ctime(buf);
    set_mtime(buf);
    set_type(buf, is_dir);
    set_level(buf, 1);

    write_block(disc_no, node, buf);
}

let add_data(node, buf) be {
}

let deepen_level() be {
}

// Let node be the block with header stuff
let add_level(disc_no, node) be {
}
