//import "io"

export
{	WORDS_PER_BLOCK, BYTES_PER_WORD,
	ceild,
	words_to_bytes, words_to_blocks,
	bytes_to_words, bytes_to_blocks,
	blocks_to_words, blocks_to_bytes }

manifest
{	WORDS_PER_BLOCK = 128,
	BYTES_PER_WORD = 4 }

// Ceiling division
// Assume numerator > 0, denominator /= 0
let ceild(numerator, denominator) be
	resultis ((numerator - 1)/denominator) + 1

let words_to_bytes(w) be
	resultis w * BYTES_PER_WORD
let words_to_blocks(w) be
	resultis ceild(w, WORDS_PER_BLOCK)

let bytes_to_words(b) be
	resultis ceild(b, BYTES_PER_WORD)
let bytes_to_blocks(b) be
	resultis words_to_blocks(bytes_to_words(b))

let blocks_to_words(b) be
	resultis b * WORDS_PER_BLOCK
let blocks_to_bytes(b) be
	resultis words_to_bytes(blocks_to_words(b))

//let start() be
//{	out("4 ?= %d\n", words_to_bytes(1));
//	out("1 ?= %d; 2 ?= %d\n", words_to_blocks(50), words_to_blocks(256));
//
//	out("5 ?= %d; 6 ?= %d\n", bytes_to_words(20), bytes_to_words(21));
//	out("1 ?= %d; 2 ?= %d\n", bytes_to_blocks(4), bytes_to_blocks(513));
//
//	out("128 ?= %d; 256 ?= %d\n", blocks_to_words(1), blocks_to_words(2));
//	out("512 ?= %d\n", blocks_to_bytes(1));
//	return }
