import "io"
import "conversion"
import "fsutils"

manifest {
    tape_prefix_length = 5,
    tape_number_char = tape_prefix_length + 1,
    // Conveniently on boundary
    tape_name_offset = 2,

    heap_size = 2048
}

// Format of file descriptor table
manifest {
    // (1) Read/Write flag. Use a word because why the fuck not.
    fd_type = 0, fd_nil = 0, fd_isfile = 1, fd_isdir = 2, fd_istape = 3,
    // (2) Current block number
    fd_block = fd_type + 1,
    // (3) Current byte number
    fd_byte = fd_block + 1,
    // (4) Total size
    fd_size = fd_byte + 1,
    // (5) Unique Identifier
    fd_id = fd_size + 1,
    // (6) Buffer Pointer
    fd_buffer = fd_id + 1,

    fd_words = fd_buffer + 1, max_fds = 5,
    fd_tab_size = max_fds * fd_words
}
static { fd_tab = vec fd_tab_size, heap = vec(heap_size) }


let mount_tape(fn, mode) be {
    let tape_no, tape;
    if strncmp(fn, "/tape", tape_prefix_length) then {
        tape_no := (byte tape_number_char of fn) - '0';
        tape := devctl(DC_TAPE_LOAD, tape_no, fn+tape_name_offset, mode);
        if tape /= 1 then resultis false;
        if devctl(DC_TAPE_CHECK, tape_no) /= mode then resultis false;
        resultis tape_no;
    }
    resultis false
}
let read_tape(tape_id, buf) be
    resultis devctl(DC_TAPE_READ, tape_id, buf)
let write_tape(tape_id, buf, n) be
    resultis devctl(DC_TAPE_WRITE, tape_id, buf, n)

let open(file, mode) be {
    let buf = vec words_per_block;
    let fd = -1;
    let tape_num;

    // Get next available file descriptor for potential use
    for i = 0 to fd_tab_size by fd_words do {
        if fd_tab ! i = 0 then {
            fd := i;
            break;
        }
    }

    if fd = -1 then resultis -1;
    tape_num := mount_tape(file, mode);
    if tape_num /= false then {
        fd_tab ! (fd + fd_type) := fd_istape;
        fd_tab ! (fd + fd_block) := 0;
        fd_tab ! (fd + fd_byte) := 0;
        // can't know size ahead of time when dealing with tapes
        fd_tab ! (fd + fd_size) := -1;
        fd_tab ! (fd + fd_id) := tape_num;
        fd_tab ! (fd + fd_buffer) := newvec(words_per_block);

        resultis fd / fd_words;
    }

    // TODO: do find() and assign fdtable entry to header block

    resultis -1
}
// TODO: implement flushing memory buffer to disc
let fflush(fd) be {}
// TODO: flush and remove file descriptor data
let close(fd) be {
    fflush(fd);
    fd_tab ! (fd * fd_words) := fd_nil;
    // free the shitty piece of asd
    freevec(fd_tab ! (fd + fd_buffer));
}
// TODO
let read(fd, buf, len) be {
    if fd_tab ! (fd + fd_type) = fd_istape then {
        resultis read_tape(fd_tab ! (fd + fd_id), buf);
    }
}
// TODO
let write(fd, buf, len) be {}

let start() be {
    let buf = vec words_per_block;
    let f;

    // uber important
    init(heap, heap_size);

    f := open("/tape/1/stdio.bcpl", 'R');
    if f /= -1 then {
        while read(f, buf, words_per_block) /= 0 then {
            outs(buf);
        }

        out(buf);
    }

    close(f);
}
