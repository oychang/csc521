import "io"
import "conversion"
import "fsutils"

manifest {
    tape_prefix_length = 5,
    tape_number_char = tape_prefix_length + 1,
    // Conveniently on boundary
    tape_name_offset = 2,
}

// Format of file descriptor table
manifest {
    // (1) Read/Write flag. Use a word because why the fuck not.
    fd_type = 0, fd_isfile = 0, fd_isdir = 1,
    // (2) Current block number
    fd_block = fd_type + 1,
    // (3) Current byte number
    fd_byte = fd_block + 1,
    // (4) Total size
    fd_size = fd_byte + 1,
    // (5) Unique Identifier
    fd_id = fd_size + 1,
    // (6) Buffer Pointer
    fd_buffer = fd_id + 1,

    fd_words = fd_buffer + 1, max_fds = 5,
    fd_tab_size = max_fds * fd_words
}
static { fd_tab = vec fd_tab_size }

// TODO
let open(file, mode) be {}
let close(fd) be {}
let fflush(fd) be {}
let read(fd, buf, len) be {}
let write(fd, buf, len) be {}

let mount_tape(fn, mode) be {
    let tape_no, tape;
    if strncmp(fn, "/tape", tape_prefix_length) then {
        tape_no := (byte tape_number_char of fn) - '0';
        tape := devctl(DC_TAPE_LOAD, tape_no, fn+tape_name_offset, mode);
        if tape /= 1 then resultis false;
        if devctl(DC_TAPE_CHECK, tape_no) /= mode then resultis false;
        resultis tape_no;
    }
    resultis false
}
let read_tape(tape_id, buf) be
    resultis devctl(DC_TAPE_READ, tape_id, buf)
let write_tape(tape_id, buf, n) ne
    resultis devctl(DC_TAPE_WRITE, tape_id, buf, n)

let start() be {
    let buf = vec words_per_block, tape_num;
    ins(buf, words_per_block);

    tape_num := mount_tape(buf, 'R');
    if tape_num /= false then {
        read_tape(tape_num, buf);
        out(buf);
    }
}
