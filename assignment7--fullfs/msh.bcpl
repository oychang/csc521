import "io"
import "filesystem"
import "fsutils"
import "superblock"
import "stdio"

manifest { max_command_chars = 256 }


let format() be {
    let s, name = vec 3;
    outs("what disc unit do you want to format?\n> ");
    s := inno();
    outs("what should it be called?\n> ");
    ins(name, sb_name_words);
    if not init_fs(s, name) then {
        outs("force format?\n[1=yes,0=no]> ");
        if inno() = 1 then {
            outs("formatting...\n");
            init_fs_unsafe(s, name);
        }
    }
}

let date() be {
    let buf = vec 2;
    get_current_time(buf);
    print_time(buf);
}

// TODO: be a thing that exists
let ls(dir) be {}

let tread() be {
    let in = vec max_command_chars;
    let f;

    outs("read from tape\n");
    outs("tapes are read by formatting with the tape number and unix filename\n");
    outs("e.g., `/tape/1/README` opens that file if it exists\n");
    outs("fn? > ");

    ins(in, max_command_chars);
    f := open(in, 'R');
    if f = -1 then {
        outs("could not open that file\n");
        return;
    }

    while read(f, in, max_command_chars) /= 0 do {
        outs(in);
    }
}

let twrite() be {
}

let start() be {
    let buf = vec max_command_chars;
    init_stdio();

    // XXX: ensure that this remains up to date
    outs("commands: format, df, date, tread, twrite, [other to exit]\n");
    {
        out("$ ");
        ins(buf, max_command_chars);

        test strcmp(buf, "format") then {
            format();
        } else test strcmp(buf, "df") then {
            df();
        } else test strcmp(buf, "date") then {
            date();
        } else test strcmp(buf, "tread") then {
            tread();
        } else test strcmp(buf, "twrite") then {
            twrite();
        } else {
            finish;
        }
    } repeat;
}
