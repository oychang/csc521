import "io"
import "filesystem"
import "fsutils"
import "superblock"
import "nodes"

manifest {
    MAX_LINE_LENGTH = 256
}

let format() be {
    let s, name = vec 3;
    outs("what disc unit do you want to format?\n> ");
    s := inno();
    outs("what should it be called?\n> ");
    ins(name, sb_name_words);
    if not init_fs(s, name) then {
        outs("force format?\n[1=yes,0=no]> ");
        if inno() = 1 then {
            outs("formatting...\n");
            init_fs_unsafe(s, name);
        }
    }
    return
}

let date() be {
    let buf = vec 2;
    get_current_time(buf);
    print_time(buf);
    return
}

let start() be {
	let buf = vec max_line_length;

    // XXX: ensure that this remains up to date
    outs("possible commands: format, df, date\n");
    {
        out("$ ");
        ins(buf, MAX_LINE_LENGTH);

        test strcmp(buf, "format") then {
            format();
        } else test strcmp(buf, "df") then {
            df();
        } else test strcmp(buf, "date") then {
            date();
        // TODO: Remove, this is for testing
        } else {
            finish;
        }
    } repeat;
}
