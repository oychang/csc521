export {
    fl_push//, fl_pop
}

// Suppose we can get more than one for both of these.
let fl_push(block_numbers, n_blocks) be {
    get stack head
        get number used blocks
        word at head of stack :=
            blocks_to_words(sb_root) - number used blocks

    let i = stack_head
    from j = n_blocks to 0 do
        freelist[i] := block_numbers[j]
        i--
}

//let fl_pop(buf, n_blocks) be {
//    get stack head
//        get number used blocks
//        word at head of stack :=
//            blocks_to_words(sb_root) - number used blocks
//
//    let i = stack_head
//    from n_blocks to 0 do
//        buf.append(freelist[i])
//        i++
//}
